Today's Agenda
---------------
JDBC Concept
        Simple Application with JDBC
	Servlet with JDBC
-----------------
What is a JDBC ?
	Java Database Connectivity

	It is a technology which meant for interacting databases from java applications. 
	It provides API(Application Programming Interface) for JDBC

	API Provides collection of predefined classes and interfaces. 

We have to follow below given 4 steps to communicate with db

1.  Making a connection to a database.
2.  Creating SQL statements
3.  Executing SQL Statements
4.  Viewing results

JDBC Architecture :- 
It provides different collection of classes and interfaces calling as JDBC API
to make connection to any database we required JDBC Driver API

Java Application ==>  JDBC API  ==>  JDBC Driver Manager(different drivers for different databases)

DriverManager  class is used to provide different drivers
Driver Interface is get the suitable driver for specific database. 
Connection interface is used to get and hold the connection of the database. 

JDBC Driver :- A Driver is an interface to communicate with database to get Connection. 

there 4 different drivers are existed 

Type 1 :  JDBC-ODBC Bridge Driver
Type 2 :  JDBC-Native API
Type 3 :  JDBC-Net Pure Java
Type 4 :  100% Pure Java(Thin Layer)

from above 4 drivers Thin Layer driver is used for java applications remaining all are out dated. 

Steps to connect to mysql database using Thin Layer Driver:-
------------------------------------------------------------
1.   Download and get the mysqlconnector jar file
2.   Add that jar file to the java application.
3.   Import following package
	java.sql
4.    Register Driver class for mysql
		Class.forName("driver name")
			com.mysql.cj.jdbc.Driver 		 =  mysql
			oracle.jdbc.driver.OracleDriver  	 = oracle
		Class.forName("com.mysql.cj.jdbc.Driver")

5.  Now make the connection with following statement. 
  Connection  <connObject> = DriverManager.getConnection("ConnectionString", "username", "password");
		ConnectionString is a string which provides URL of the connecting databases. 

			for MySQL :   "jdbc:mysql://hostname:portno/databasename"
			for Oracle :-  "jdbc:oracle:thin:@hostname:portno:databasename"
Connection conObj = DriverManager.getConnection("jdbc:mysql://localhost:3306/Phase2Db","root", "root")
-------------------------------------------------------
Statement Interface :- this interface is used to generate sql commands. It has following two methods. 

Statement <object> =  connetionObj.createStatement();
		here createStatement() method initiates sqlcommands. 

executeUpdate("sqlcommand") :- this methods executes all the sql commands execpt "SELECT". 
		statementObj.executeUpdate("Insert/Update/Delete");

executeQuery("select") :-  this methods executes only select statement and returns ResultSet object which exist all rows of table. 
		ResultSet  <object> =  statementObj.executeQuery("Select");
-------------------------------------------------
Generating Insert Command with variables

INSERT INTO STUDENT(ROLLNO, STDNAME, COURSE, FEES) VALUES(101, 'PRAVEEN KUMAR', 'JAVA', 15000.00);

rno = 102
sn = "Jagan"
cour =  "Java"
fees = 12000.00

String inscmd = "INSERT INTO STUDENT(ROLLNO, STDNAME, COURSE, FEES) VALUES(" + rno + ",'" + sn + "','" + cour + "'," + fees + ")";

Insert into Employee(ename, job, salary) values('Pavan Kumar', 'Developer', 10000);

ename = "Pavan";
job = "Manager";
sal = 10000

String inscmd = "Insert into Employee(ename, job, salary) values('" + ename + "','" + job + "'," + sal + ")" 

-----------------------------------------
PreparedStatement :-  This interface as same as Statement Interface, but it allows to send arguments for the sql queries. 

for Every Argument, ? will be represented and for that passing values has to be done by following methods
Setter methods
setInt(index, value)
setString(index, value)
setFloat(index, value)
Here index numbers starts from 1, .....
To execute queries
executeUpdate() :-  for all sqlcommands except SELECT
executeQuery() :-  only for SELECT statement

......
ResultSet :-  This class allows to store result of the select statement. 

ResultSet  rs = stmt.executeQuery("Select * from Student");
ResultSet  rs = PreparedstmtObj.executeQuery();


next() :-  this method is used to check data existancy based on row pointer. 

getter methods :- these methds are used to retrive data from table columns. 
getInt(colname)
getString(colname)
getFloat(colname)
getLong(colname)
getShort(colname)


while(rs.next())
{
	sop(rs.getInt("rollno"))
	sop(rs.getstring("sname"))
}
------------------------------
Servlet With JDBC:- 

1. Create an servlet application
2. Add Servlet-api.jar and mysqlconnector.jar
3. copy mysqlconnector.jar and paste it in Lib folder of WEB-INF foloder.